@model List<DARE.Models.Thing>

@{
    ViewBag.Title = "Dashboard";
}
<div class="header">
    <h1>Dashboard</h1>
</div>
<div class="row">

    @for (var i = 0; i < Model.Count; i++)
    {
        <div id="tile@(i)" class="col-md-4 tile" ondrop="drop(event)" ondragover="allowDrop(event)">
            <div id="draggable@(Model[i].ThingID)" class="draggable panel-default" draggable="true" ondragstart="drag(event)">
                <div class="panel-heading">
                    <h4 class="panel-title deviceStatus@(Model[i].Client.ClientCode)">@Model[i].Name</h4>
                </div>

                <div class="panel-body">
                    @if (Model[i].Type == "Thermometer")
                    {
                        <div id="temperatureDiv">
                            <canvas id="gauge@(Model[i].ThingID)" width="215" height="215"
                                    data-type="canv-gauge"
                                    data-title="Temperature"
                                    data-min-value="-20"
                                    data-max-value="120"
                                    data-major-ticks="-20 -10 0 10 20 30 40 50 60 70 80 90 100 110 120"
                                    data-minor-ticks="2"
                                    data-stroke-ticks="true"
                                    data-units="&deg; F"
                                    data-value-format="2.2"
                                    data-glow="true"
                                    data-animation-delay="10"
                                    data-animation-duration="300"
                                    data-animation-fn="bounce"
                                    data-colors-needle="#f00"
                                    data-highlights="-20 10 #B853E0, 10 55 #00C8FF, 55 80 #4BED00, 80 100 #EDED00, 100 120 #ED0010"></canvas>
                        </div>
                    }
                    else if (Model[i].Type == "Switch")
                    {
                        <div class="onoffswitch">
                            <input type="checkbox" name="onoffswitch@(Model[i].ThingID)" class="onoffswitch-checkbox" id="myonoffswitch@(Model[i].ThingID)" onclick="if (document.getElementById('myonoffswitch@(Model[i].ThingID)').checked) { turnOn('@Model[i].ThingID'); } else { turnOff('@Model[i].ThingID'); }">
                            <label class="onoffswitch-label" for="myonoffswitch@(Model[i].ThingID)"></label>
                        </div>
                    }
                    else if (Model[i].Type == "Door Sensor")
                    {
                        <div class="state@(Model[i].ThingID)">

                        </div>
                    }
                 </div>
            </div>
        </div>
    }
    <div id="tile100" class="col-md-4 tile" ondrop="drop(event)" ondragover="allowDrop(event)">

    </div>
</div>

<script>
    function allowDrop(ev) {
        ev.preventDefault();
        this.className += ' dragOver';
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
        ev.preventDefault();

        var data = ev.dataTransfer.getData("text");
        ev.target.appendChild(document.getElementById(data));
    }
</script>
<script>
    $(document).ready(function () {
        var hash = Sha1.hash("@User.Identity.Name");
        pubnub = PUBNUB({
            publish_key: 'pub-c-2a63b4b0-ca5b-4f32-8db9-1c9a1d04ec33',
            subscribe_key: 'sub-c-deb946f2-840e-11e5-9e96-02ee2ddab7fe',
            ssl: true,
            uuid: hash
        });

        pubnub.subscribe({
            channel: "pruessner_tribe",
            message: function (m) { console.log(m) },
            connect: getConnectedClients(),
            callback: function (m) { queryMessage(m) },
            presence: function (m) { presenceCheck(m) }
        });
    })
    function presenceCheck(m) {
        if (m.action == "join") {
            $('.deviceStatus' + m.uuid).removeClass("clientDisconnectedD");
            $('.deviceStatus' + m.uuid).addClass("clientConnectedD");
        } else if (m.action == "leave") {
            $('.deviceStatus' + m.uuid).removeClass("clientConnectedD");
            $('.deviceStatus' + m.uuid).addClass("clientDisconnectedD");
        }
    }
    
    function queryMessage(m) {
        if (m.commands[0].hasOwnProperty("state")) {
            if (m.id == 6) {
                if (m.commands[0].state == "1") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch6').prop('checked', true);
                } else if (m.commands[0].state == "0") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch6').prop('checked', false);
                }
            } else if (m.id == 7) {
                if (m.commands[0].state == "1") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch7').prop('checked', true);
                } else if (m.commands[0].state == "0") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch7').prop('checked', false);
                }
            } else if (m.id == 8) {
                if (m.commands[0].state == "1") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch8').prop('checked', true);
                } else if (m.commands[0].state == "0") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch8').prop('checked', false);
                }
            } else if (m.id == 11) {
                if (m.commands[0].state == "1") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch11').prop('checked', true);
                } else if (m.commands[0].state == "0") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch11').prop('checked', false);
                }
            }
            
        } else if (m.commands[0].hasOwnProperty("temperature")) {
            $('.gettingState').html(" ");
            var temp = m.commands[0].temperature;
            temp = (temp * 1.8) + 32;
            temp = temp.toPrecision(3);
            Gauge.Collection.get('gauge'+m.id).setValue(temp);
        } else if (m.commands[0].hasOwnProperty("doorState")) {
            if (m.commands[0].doorState == "1") {
                $('.gettingState').html(" ");
                $('.state'+m.id).html("<h2 style='color:green;'>CLOSED</h2>");
            } else if (m.commands[0].doorState == "0") {
                $('.gettingState').html(" ");
                $('.state'+m.id).html("<h2 style='color: red;'>OPEN</h2>");
            }
        }
    }
    function getStates(clientCode) {
        var thingArray = new Array();
        $.ajax({
            type: "POST",
            url: "/Home/getThings",
            data: JSON.stringify({ clientCode: clientCode }),
            contentType: "application/json; charset=utf-8",
            dataType: 'text',
            success: function (data) {
                var things = jQuery.parseJSON(data);
                console.log(things);
                for (var thing of things) {
                    thingArray.push(thing);
                }
                for (var thing of thingArray) {
                    var root = { "id": thing.ThingID.toString(), "commands": [{ "getState": "1" }] };
                    publishMessage(root);
                }
            }
        });
    }

    function publishMessage(i) {
        setTimeout(function () {
            pubnub.publish({
                channel: "pruessner_tribe",
                message: i,
                callback: function (m) { console.log(m) }
            })
        }, 2000);
    }

    function turnOn(thingid) {
        var x = { "id": thingid.toString(), "commands": [{ "action": "1" }] };
        pubnub.publish({
            channel: "pruessner_tribe",
            message: x,
            callback: function (m) { console.log(m) }
        })
        $("#myonoffswitch"+thingid).attr("disabled", true);
        setTimeout(function () {
            $('#myonoffswitch'+thingid).attr("disabled", false);
        }, 2000)
    }
    function turnOff(thingid) {
        var x = { "id": thingid.toString(), "commands": [{ "action": "0" }] };
        pubnub.publish({
            channel: "pruessner_tribe",
            message: x,
            callback: function (m) { console.log(m) }
        })
        $("#myonoffswitch"+thingid).attr("disabled", true);
        setTimeout(function () {
            $('#myonoffswitch'+thingid).attr("disabled", false);
        }, 2000)
    }
    function getConnectedClients(m) {
        pubnub.here_now({
            channel: 'pruessner_tribe',
            callback: function (m) {
                console.log(m.uuids.toString());
                console.log(m);
                var uuids = new Array();
                @foreach(var client in ViewBag.ClientList)
                {
                    @:uuids.push("@client.ClientCode");
                }
                for (var clientCode of uuids) {
                    if (m.uuids.indexOf(clientCode) != -1) {
                        $('.deviceStatus' + clientCode).addClass("clientConnectedD");
                        getStates(clientCode);
                    } else {
                        $('.deviceStatus' + clientCode).addClass("clientDisconnectedD");
                    }
                }
            }
        });
    }
</script>