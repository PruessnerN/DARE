@model DARE.Models.Thing

@{
    ViewBag.Title = "ControlThing";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="header">
    <h2 id="deviceStatus" style="width:auto; display:inline-block">Control @Model.Name</h2> 
</div>
@if (Model.ThingID == 9)
{
    <div id="temperatureDiv">
        <canvas id="gauge1" width="400" height="400"
                data-type="canv-gauge"
                data-title="Temperature"
                data-min-value="-20"
                data-max-value="120"
                data-major-ticks="-20 -10 0 10 20 30 40 50 60 70 80 90 100 110 120"
                data-minor-ticks="2"
                data-stroke-ticks="true"
                data-units="&deg; F"
                data-value-format="2.2"
                data-glow="true"
                data-animation-delay="10"
                data-animation-duration="300"
                data-animation-fn="bounce"
                data-colors-needle="#f00"
                data-highlights="-20 10 #B853E0, 10 55 #00C8FF, 55 80 #4BED00, 80 100 #EDED00, 100 120 #ED0010"></canvas>
    </div>
}
else if (Model.ThingID == 6 || Model.ThingID == 7 || Model.ThingID == 8)
{
    <div class="onoffswitch">
        <input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="myonoffswitch" onclick="if (document.getElementById('myonoffswitch').checked) { turnOn(); } else { turnOff(); }">
        <label class="onoffswitch-label" for="myonoffswitch"></label>
    </div>
} else if (Model.ThingID == 10)
{
    <div class="state">

    </div>
}
<br />
<br />
@Html.ActionLink("Back To Things", "Index", null, new { @class = "red btn" })
<script>
    $(document).ready(function () {
        var hash = Sha1.hash("@User.Identity.Name");
        pubnub = PUBNUB({
            publish_key: 'pub-c-2a63b4b0-ca5b-4f32-8db9-1c9a1d04ec33',
            subscribe_key: 'sub-c-deb946f2-840e-11e5-9e96-02ee2ddab7fe',
            ssl: true,
            uuid: hash
        });

        pubnub.subscribe({
            channel: "pruessner_tribe",
            message: function (m) { console.log(m) },
            connect: getConnectedClients(),
            callback: function (m) { queryMessage(m) },
            presence: function (m) { presenceCheck(m) }
        });
    })
    function presenceCheck(m) {
        if (m.uuid == "@Model.Client.ClientCode") {
            if (m.action == "join") {
                $('#deviceStatus').removeClass("clientDisconnected");
                $('#deviceStatus').addClass("clientConnected");
            } else if (m.action == "leave") {
                $('#deviceStatus').removeClass("clientConnected");
                $('#deviceStatus').addClass("clientDisconnected");
            }
        }
    }
    function queryMessage(m) {
        if (m.id == "@Model.ThingID.ToString()") {
            if (m.commands[0].hasOwnProperty("state")) {
                if (m.commands[0].state == "1") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch').prop('checked', true);
                } else if (m.commands[0].state == "0") {
                    $('.gettingState').html(" ");
                    $('#myonoffswitch').prop('checked', false);
                }
            } else if (m.commands[0].hasOwnProperty("temperature")) {
                $('.gettingState').html(" ");
                var temp = m.commands[0].temperature;
                temp = (temp * 1.8) + 32;
                temp = temp.toPrecision(3);
                Gauge.Collection.get('gauge1').setValue(temp);
            } else if (m.commands[0].hasOwnProperty("doorState")) {
                if (m.commands[0].doorState == "1") {
                    $('.gettingState').html(" ");
                    $('.state').html("<h2 style='color:green;'>CLOSED</h2>");
                } else if (m.commands[0].doorState == "0") {
                    $('.gettingState').html(" ");
                    $('.state').html("<h2 style='color: red;'>OPEN</h2>");
                }
            }
        }
    }
    function getState() {
        var root = { "id": "@Model.ThingID.ToString()", "commands": [{ "getState": "1" }] };
        pubnub.publish({
            channel: "pruessner_tribe",
            message: root,
            callback: function (m) { console.log(m) }
        })
    }
    function turnOn() {
        var x = { "id": "@Model.ThingID.ToString()", "commands": [{ "action": "1" }] };
        pubnub.publish({
            channel: "pruessner_tribe",
            message: x,
            callback: function (m) { console.log(m) }
        })
        $("#myonoffswitch").attr("disabled", true);
        setTimeout(function () {
            $('#myonoffswitch').attr("disabled", false);
        }, 2000)
    }
    function turnOff() {
        var x = { "id": "@Model.ThingID.ToString()", "commands": [{ "action": "0" }] };
        pubnub.publish({
            channel: "pruessner_tribe",
            message: x,
            callback: function (m) { console.log(m) }
        })
        $("#myonoffswitch").attr("disabled", true);
        setTimeout(function () {
            $('#myonoffswitch').attr("disabled", false);
        }, 2000)
    }
    function getConnectedClients() {
        pubnub.here_now({
            channel: 'pruessner_tribe',
            callback: function (m) {
                console.log(m.uuids.toString());
                console.log(m);
                var connected = m.uuids.indexOf("@Model.Client.ClientCode");
                if (connected == -1) {
                    $('#deviceStatus').addClass("clientDisconnected");
                } else {
                    $('#deviceStatus').addClass("clientConnected");
                    getState();
                }
            }
        });
    }
</script>
